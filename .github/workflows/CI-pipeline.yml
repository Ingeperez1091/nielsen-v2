name: CI Pipeline

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
  pull_request:
    branches: [ "master", "develop" ]
jobs:
  build-and-test:
    environment: dev
    env:
      BUILD_CONFIG: 'Release'
      SOLUTION: 'NielsenChannelsReporting/NielsenChannelsReporting.sln'
      UNIT_TEST_PROJECT: './NielsenChannelsReporting/NielsenChannelsReporting.Tests/NielsenChannelsReporting.Tests.csproj'
      
    runs-on: ubuntu-latest
    permissions:
      issues: read
      checks: write
      contents: write
      pull-requests: write

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore ${{env.SOLUTION}}
    - name: Build
      run: |
        dotnet build ${{env.SOLUTION}} --configuration ${{env.BUILD_CONFIG}} --no-restore
        echo "Build completed successfully"

    - name: Run Unit Tests
      run: |
        dotnet test ${{env.UNIT_TEST_PROJECT}} --configuration ${{env.BUILD_CONFIG}} --no-restore --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory TestResults --logger trx;LogFileName=test_results.trx
        echo "Unit tests completed successfully"
        
    - name: Upload dotnet test results
      uses: actions/upload-artifact@v3
      with:
          name: test-results
          path: TestResults
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
    - name: Publish Test Results to PR
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          TestResults/*.trx

    - name: View Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: View Unit Tests
        path: TestResults/*.trx
        reporter: dotnet-trx
    
    - name: Install ReportGenerator
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
    ## TestResults
    - name: Generate detailed coverage report
      run: |
        reportgenerator "-reports:**/coverage.cobertura.xml" "-targetdir:coverage"
          
    - name: Upload detailed coverage report
      uses: actions/upload-artifact@v2
      with:
        name: Coverage Report
        path: coverage
    
    - name: Publish detailed coverage report as GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./coverage

    - name: Test2
      run: |
        dotnet test ${{env.UNIT_TEST_PROJECT}} --configuration ${{env.BUILD_CONFIG}} --no-restore --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage2

    - name: Code Coverage Summary Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage2/**/coverage.cobertura.xml
        badge: true
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '5 15'

    - name: Add Coverage Summary PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md
  
    
